use crypto::digest::Digest;
use crypto::hmac::Hmac;
use crypto::mac::{Mac, MacResult};
use crypto::sha1::Sha1;

pub struct AxHmacSha1 {
    hmac: Hmac<AxSha1>
}

impl AxHmacSha1 {
    pub fn new(key: &[u8]) -> AxHmacSha1 {
        AxHmacSha1 {
            hmac: Hmac::new(AxSha1::new(), key),
        }
    }

    pub fn input(&mut self, header: &[u8]) {
        self.hmac.input(header);
    }

    pub fn result(&mut self) -> MacResult {
        self.hmac.result()
    }
}

pub struct AxSha1 {
    sha: Sha1,
}

impl AxSha1 {
    pub fn new() -> AxSha1 {
        AxSha1 {
            sha: Sha1::new()
        }
    }
}

impl Digest for AxSha1 {
    fn input(&mut self, input: &[u8]) {
        self.sha.input(input)
    }

    fn result(&mut self, out: &mut [u8]) {
        self.sha.result(out)
    }

    fn reset(&mut self) {
        self.sha.reset()
    }

    fn output_bits(&self) -> usize {
        160
    }

    fn block_size(&self) -> usize {
        20
    }
}

#[cfg(test)]
mod tests {
    use crate::decrypt::derive_key;
    use crate::header::encrypt_subkey;
    use crate::hmacsha::AxHmacSha1;
    use crate::key::KeyParams;

    #[test]
    fn test_mac() {

        let expected_mac: [u8; 16] = [0xf9, 0xaf, 0x2e, 0x67, 0x7d, 0xcf, 0xc9, 0xfe, 0x06, 0x4b, 0x39, 0x08, 0xe7, 0x5a, 0x87, 0x81];
        let headers: &[&[u8]] = &[
            &[
                0x25, 0x00, 0x00, 0x00, 0x42,
                0xdc, 0x39, 0xe8, 0xd6, 0xb9, 0xdb, 0xf1, 0x8c, 0x49, 0xac, 0x72, 0xd4, 0x67, 0x59, 0x64, 0x20,
                0xa1, 0x80, 0x62, 0xa8, 0xe6, 0xda, 0xbd, 0x61, 0xde, 0x88, 0x37, 0x07, 0x38, 0x8e, 0x0e, 0x21
            ],
            &[
                0x15, 0x00, 0x00, 0x00, 0x45,
                0x8f, 0xfb, 0x89, 0xf1, 0x49, 0x1e, 0x29, 0x3a, 0xad, 0x67, 0x1d, 0x06, 0x9d, 0x15, 0xd2, 0x4a
            ],
            &[
                0x15, 0x00, 0x00, 0x00, 0x43,
                0x2c, 0xa8, 0x3b, 0x8c, 0x65, 0xa2, 0xe4, 0x23, 0x17, 0xfd, 0x17, 0x99, 0x92, 0x27, 0x7b, 0x91
            ],
            &[
                0x25, 0x00, 0x00, 0x00, 0x44,
                0x9a, 0x22, 0xb3, 0xc9, 0x77, 0xe4, 0x95, 0x24, 0x9d, 0xbc, 0x82, 0x44, 0x3b, 0x88, 0x54, 0xa1,
                0x3a, 0x37, 0xa0, 0xbc, 0xe9, 0x33, 0x6e, 0x11, 0x7a, 0x68, 0xa1, 0x05, 0x7f, 0x0f, 0x54, 0x2c
            ],
            &[
                0x25, 0x00, 0x00, 0x00, 0x41,
                0x7e, 0x90, 0x2d, 0x1d, 0x6f, 0x54, 0xff, 0x60, 0x10, 0x03, 0xee, 0x65, 0xbf, 0x03, 0xa6, 0x4f,
                0x9f, 0x5a, 0x41, 0x55, 0xb1, 0x65, 0xce, 0x0f, 0xc0, 0xaa, 0xdc, 0x08, 0xe8, 0xf1, 0x30, 0xd0
            ],
            &[
                0x35, 0x00, 0x00, 0x00, 0x46,
                0x5b, 0xdd, 0x45, 0x57, 0x0d, 0xa0, 0xfc, 0x8e, 0x92, 0xc7, 0x74, 0xb3, 0x06, 0x9e, 0xd7, 0x18,
                0x55, 0xef, 0x23, 0xbc, 0x11, 0xc0, 0x3a, 0x11, 0x8d, 0x8a, 0xea, 0x5c, 0x84, 0x6e, 0x62, 0x4e,
                0x11, 0xbe, 0x26, 0xb4, 0x4b, 0x5b, 0x7a, 0xc8, 0x05, 0x69, 0x8f, 0x9b, 0x3b, 0x20, 0x11, 0x66
            ],
            &[
                0x31, 0x00, 0x00, 0x00, 0x04,
                0x4e, 0xea, 0x07, 0xf3, 0x45, 0x91, 0x70, 0xed, 0x8e, 0x40, 0xf9, 0x22, 0xf4, 0xee, 0xcb, 0xa1,
                0x4d, 0x9e, 0xee, 0x9a, 0x5b, 0x30, 0x18, 0x63, 0x24, 0x87, 0x83, 0x8c, 0xf3, 0xcd, 0xaa, 0x5c,
                0xc1, 0xcc, 0x34, 0x84, 0xf1, 0x30, 0x6a, 0x0e, 0x98, 0x3a, 0x00, 0x00
            ],
            &[
                0x0d, 0x00, 0x00, 0x00, 0x03,
                0x03, 0x02, 0x01, 0x07, 0x4b, 0xa3, 0x7f, 0xb6
            ],
            &[
                0x0d, 0x00, 0x00, 0x00, 0x3f,
                0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ],
            &[
                0x34, 0x5f, 0xe3, 0x5c, 0x86, 0x97, 0xed, 0x81, 0x84, 0xfe, 0x2b, 0x4a, 0x9a, 0xd2, 0xbe, 0xfd
            ]
        ];

        let key = derive_key("a");
        let params = KeyParams::parse(&[0x4e, 0xea, 0x07, 0xf3, 0x45, 0x91, 0x70, 0xed, 0x8e, 0x40, 0xf9, 0x22, 0xf4, 0xee, 0xcb, 0xa1,
            0x4d, 0x9e, 0xee, 0x9a, 0x5b, 0x30, 0x18, 0x63, 0x24, 0x87, 0x83, 0x8c, 0xf3, 0xcd, 0xaa, 0x5c,
            0xc1, 0xcc, 0x34, 0x84, 0xf1, 0x30, 0x6a, 0x0e, 0x98, 0x3a, 0x00, 0x00]);
        let key = params.unwrap_key(&key).unwrap();
        let key = encrypt_subkey(&key, 0).unwrap();

        let mut mac = AxHmacSha1::new(&key);

        for header in headers {
            mac.input(header);
        }

        let output = mac.result();
        let actual = output.code();

        assert_eq!(expected_mac, actual[..16]);
    }
}